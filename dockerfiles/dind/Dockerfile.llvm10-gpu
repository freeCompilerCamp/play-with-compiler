FROM freecompilercamp/pwc:middle-gpu

# Install basic packages
RUN apt-get update && \
    apt-get -y install git tmux python-pip apache2-utils vim build-essential gettext curl bash-completion bash util-linux jq openssh-client openssl tree cmake man libelf-dev libffi-dev

RUN apt-get install -y \
        apt-utils \
        dialog \
        software-properties-common

# Adding user freecc
RUN groupadd -g 9999 freecc && \
    useradd -r -u 9999 -g freecc -m -d /home/freecc freecc

ENV GOPATH /home/freecc/go
ENV PATH $PATH:$GOPATH

# Install httping
RUN apt-get -y install httping

ENV DOCKERAPP_VERSION=v0.8.0
ENV COMPOSE_VERSION=1.23.2
# Install Compose and Machine
RUN pip install docker-compose==${COMPOSE_VERSION}

RUN curl -fsSL --output /tmp/docker-app-linux.tar.gz https://github.com/docker/app/releases/download/${DOCKERAPP_VERSION}/docker-app-linux.tar.gz \
    && tar xf "/tmp/docker-app-linux.tar.gz" -C /tmp/ && mkdir -p /root/.docker/cli-plugins && mv /tmp/docker-app-plugin-linux /root/.docker/cli-plugins/docker-app && rm /tmp/docker-app*

# Add bash completion and set bash as default shell
#RUN mkdir /etc/bash_completion.d \
RUN curl https://raw.githubusercontent.com/docker/cli/master/contrib/completion/bash/docker -o /etc/bash_completion.d/docker \
    && sed -i "s/ash/bash/" /etc/passwd
 
# Replace modprobe with a no-op to get rid of spurious warnings
# (note: we can't just symlink to /bin/true because it might be busybox)
#RUN rm /sbin/modprobe && echo '#!/bin/true' >/sbin/modprobe && chmod +x /sbin/modprobe
RUN echo '#!/bin/true' > /sbin/modprobe && chmod +x /sbin/modprobe

# Install a nice vimrc file and prompt (by soulshake)
COPY ["docker-prompt", "sudo", "/usr/local/bin/"]
COPY ["motd", "/etc/motd"]
COPY ["daemon.json", "/etc/docker/"]

# Remove IPv6 alias for localhost and start docker in the background ...
CMD cat /etc/hosts > /home/freecc/.hosts.bak && \
    sed 's/^::1.*//' /home/freecc/.hosts.bak > /etc/hosts && \
    sed -i "s/\PWD_IP_ADDRESS/$PWD_IP_ADDRESS/" /etc/docker/daemon.json && \
    sed -i "s/\DOCKER_TLSENABLE/$DOCKER_TLSENABLE/" /etc/docker/daemon.json && \
    sed -i "s/\DOCKER_TLSCACERT/$DOCKER_TLSCACERT/" /etc/docker/daemon.json && \
    sed -i "s/\DOCKER_TLSCERT/$DOCKER_TLSCERT/" /etc/docker/daemon.json && \
    sed -i "s/\DOCKER_TLSKEY/$DOCKER_TLSKEY/" /etc/docker/daemon.json && \
    mount -t securityfs none /sys/kernel/security && \
    echo "root:root" | chpasswd &> /dev/null && \
    /usr/sbin/sshd -o PermitRootLogin=yes -o PrintMotd=no 2>/dev/null && \
    dockerd &> /home/freecc/.docker.log & \
    while true ; do script -q -c "/bin/bash -l" /dev/null ; done
# ... and then put a shell in the foreground, restarting it if it exits

# Setup certs and ssh keys
RUN mkdir -p /var/run/pwd/certs && mkdir -p /var/run/pwd/uploads \
    && ssh-keygen -N "" -t rsa -f  /etc/ssh/ssh_host_rsa_key >/dev/null

# Install prerequisite
RUN apt-get -y install ninja-build

# Switch user to freecc
USER freecc

# Install LLVM
ENV LLVM_SRC /home/freecc/source/llvm_src
ENV LLVM_PATH /home/freecc/install/llvm_install
ENV LLVM_BUILD /home/freecc/build/llvm_build

RUN mkdir -p $LLVM_SRC && \
    mkdir -p $LLVM_PATH && \
    mkdir -p $LLVM_BUILD && \
    cd $LLVM_SRC && \
    git clone -b release/10.x https://github.com/llvm/llvm-project . && \
    cd $LLVM_BUILD && \
    cmake -G Ninja -DCMAKE_BUILD_TYPE=RELEASE -DCMAKE_INSTALL_PREFIX=$LLVM_PATH -DLLVM_ENABLE_PROJECTS="clang;clang-tools-extra;compiler-rt;openmp;libcxx;libcxxabi" -DLLVM_TARGETS_TO_BUILD="host;NVPTX" -DCLANG_OPENMP_NVPTX_DEFAULT_ARCH=sm_37 -DLIBOMPTARGET_NVPTX_COMPUTE_CAPABILITIES=37,60,70 -DCLANG_BUILD_EXAMPLES=1 $LLVM_SRC/llvm && \
    ninja install -j8 -l8

RUN cd $LLVM_BUILD && \
    cmake -G Ninja -DCMAKE_BUILD_TYPE=RELEASE -DCMAKE_INSTALL_PREFIX=$LLVM_PATH -DLLVM_ENABLE_PROJECTS="clang;clang-tools-extra;compiler-rt;openmp;libcxx;libcxxabi" -DLLVM_TARGETS_TO_BUILD="host;NVPTX" -DCLANG_OPENMP_NVPTX_DEFAULT_ARCH=sm_37 -DLIBOMPTARGET_NVPTX_COMPUTE_CAPABILITIES=37,60,70 -DLIBOMPTARGET_NVPTX_ENABLE_BCLIB=ON -DLIBOMPTARGET_NVPTX_CUDA_COMPILER=$LLVM_PATH/bin/clang -DCLANG_BUILD_EXAMPLES=1 $LLVM_SRC/llvm && \
    ninja install -j8 -l8

ENV PATH $LLVM_PATH/bin:$PATH
ENV LD_LIBRARY_PATH $LLVM_PATH/libexec:$LD_LIBRARY_PATH
ENV LD_LIBRARY_PATH $LLVM_PATH/lib:$LD_LIBRARY_PATH
ENV LIBRARY_PATH $LLVM_PATH/libexec:$LIBRARY_PATH
ENV LIBRARY_PATH $LLVM_PATH/lib:$LIBRARY_PATH
ENV MANPATH $LLVM_PATH/share/man:$MANPATH
ENV C_INCLUDE_PATH $LLVM_PATH/include:$C_INCLUDE_PATH
ENV CPLUS_INCLUDE_PATH $LLVM_PATH/include:CPLUS_INCLUDE_PATH

# Move to our home
WORKDIR /home/freecc

# Setup certs and ssh keys
RUN mkdir ~/.ssh && ssh-keygen -N "" -t rsa -f ~/.ssh/id_rsa \
    && cat ~/.ssh/id_rsa.pub > ~/.ssh/authorized_keys

COPY [".vimrc", ".profile", ".inputrc", ".gitconfig", "/home/freecc/"]
